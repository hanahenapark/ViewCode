; NOTE: MOST TEST CASES WERE FROM THE FOLLOWING LINKS: 
;https://norvig.com/lispy.html, http://norvig.com/lispy2.html, https://www.tutorialspoint.com/lisp/index.htm
;complicated calculation solutions are likely in comments of this file


(write "Test Cases")
(terpri)

(write "lisp>expresses actions")
(terpri)
(write "-result of action/write below")
(terpri)
(write "-if defining variable/list, result of write below")
(terpri)
(write "-if defining function, no result")
(terpri)
(write "-if evaluating, result of evaluation below")
(terpri)

(write "--------------------DEFINING/SETTING VARIABLES-------------------------------------")
(terpri)
(write "lisp>define a 10")
(define a 10)
(terpri)
(write a)
(terpri)

(write "lisp>set a 50")
(set a 50)
(terpri)
(write a)
(terpri)

(write "lisp>define pi 3.14")
(define pi 3.14)
(terpri)
(write pi)
(terpri)

(write "lisp>define str sdf")
(define str "sdf")
(terpri)
(write str)
(terpri)
(write "lisp>set str please_change")
(set str "please_change")
(terpri)
(write str)
(terpri)

(write "--------------------------DEFINING LISTS-------------------------------------------")
(terpri)
(write "lisp>define list_num_1 (list 1 2 3)")
(define list_num_1 (list 1 2 3))
(terpri)
(write list_num_1)
(terpri)

(write "lisp>define list_num_2 (list 23 4 521 56 7 8 52 432 67)")
(define list_num_2 (list 23 4 521 56 7 8 52 432 67))
(terpri)
(write list_num_2)
(terpri)

(write "lisp>define list_num_3 (list 23.234 4.1 521.4 561.0 7.3 8.24 52.53 432.2 62.7)")
(define list_num_3 (list 23.234 4.1 521.4 561.0 7.3 8.24 52.53 432.2 62.7))
(terpri)
(write list_num_3)
(terpri)

(write "lisp>define list_string_1 hello, world, !")
(define list_string_1 (list "hello" "world" "!"))
(terpri)
(write list_string_1)
(terpri)

(write "lisp>define list_string_2 Roll, Tide, !, I, am, so, sad,that, the, United States of America did, not advance far, in the World Cup")
(define list_string_2 (list "Roll" "Tide" "!" "I" 
"am" "so" "sad" "that" "the" "United States of America did" "not advance far" "in the World Cup"))
(terpri)
(write list_string_2)
(terpri)

(write "lisp>list of numbers and strings in list_numstr_combo_1 s24, 34gs,5sd3,afd342,23 , 8, sd")
(define list_numstr_combo_1 (list "s24" "34gs" "5sd3" "afd342" 23 8 "sd"))
(terpri)
(write list_numstr_combo_1)
(terpri)

(write "--------------------------CONS LISTS, CDR LIST, CAR LIST-------------------------------------------")
(terpri)
(write "lisp>cons 1 2")
(terpri)
(write (cons 1 2))
(terpri)
(write "lisp>cons 1 (cons 2 (cons 3 4))")
(terpri)
(write (cons 1 (cons 2 (cons 3 4))))
(terpri)
(write "lisp>cons 9 (cons 7 (cons 4 ()))")
(terpri)
(write (cons 9 (cons 7 (cons 4 ()))))
(terpri)
(write "lisp>cons live (cons laugh (cons love ()))")
(terpri)
(write (cons "live" (cons "laugh" (cons "love" ()))))
(terpri)

(write "lisp>write define words (cons live (cons laugh (cons love ())))")
(terpri)
(define words(cons "live" (cons "laugh" (cons "love" ()))))
(write "lisp>write words")
(terpri)
(write words)
(terpri)

(terpri)
(write "REFERENCING list_num_2:")
(write list_num_2);
(terpri)

(write "lisp>car list_num_2")
(terpri)
(write (car list_num_2))
(terpri)
(write "lisp>cdr list_num_2")
(terpri)
(write (cdr list_num_2))
(terpri)
(write "lisp>(car (cdr list_num_2))")
(terpri)
(write (car(cdr list_num_2)))
(terpri)
(write "lisp>car (cdr(cdr list_num_2))")
(terpri)
(write (car(cdr(cdr list_num_2))))
(terpri)
(write "lisp>def ref cons 1 ()")
(terpri)
(define ref (cons 1 ()))
(terpri)
(write "lisp> cdr ref")
(terpri)
(write (cdr ref))
(write "lisp>NULL? cdr ref")
(terpri)
(write (NULL? (cdr ref)))
(terpri)
(write "lisp>NULL? car ref")
(terpri)
(write (NULL? (car ref)))
(terpri)



(write "--------------------------DEFINING FUNCTIONS-------------------------------------------")
(terpri)
(write "lisp>Defining circle-area")
(define circle-area (lambda (r) (* pi (* r r))))
(terpri)
(write "lisp>circle-area 3")
(terpri)
(write (circle-area 3))
(terpri)

(write "lisp>Defining factorial fact")
(define fact (lambda (n) (if (<= n 1) 1 (* n (fact (- n 1))))))
(terpri)
(write "lisp>fact 10")
(terpri)
(write (fact 10))
(terpri)

(write "lisp>Defining fibonnaci fib")
(define fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))))
(terpri)
(write "lisp>fib 10")
(terpri)
(write(fib 10))
(terpri)

(write "lisp>circle-area(fact 10)")
(terpri)
(write(circle-area (fact 10)))
(terpri)

(write "lisp>Defining twice")
(define twice (lambda (x) (* 2 x)))
(terpri)
(write "lisp>twice 5")
(terpri)
(write(twice 5))
(terpri)

(write "lisp>Defining repeat")
(define repeat (lambda (f) (lambda (x) (f (f x)))))
(terpri)
(write "lisp>((repeat twice )10)")
(terpri)
(write((repeat twice) 10))
(terpri)
(write "lisp>(repeat (repeat twice)) 10)")
(terpri)
(write((repeat (repeat twice)) 10))
(terpri)
(write "lisp>(repeat (repeat (repeat twice))) 10)")
(terpri)
(write((repeat (repeat (repeat twice))) 10))

(terpri)   
(write "lisp>Defining Range")
(define range (lambda (a b) (if (= a b) (quote ()) (cons a (range (+ a 1) b)))))
(terpri)
(write "lisp>range 0 10")
(terpri)
(write(range 0 10))
(terpri)
(write "lisp>(map fib (range 0 10))")
(terpri)
(write(map fib (range 0 10)))
(terpri)

(write "lisp>Defining cube")
(define (cube x)(* x (* x x)))
(terpri)
(write "lisp> cube 5")
(terpri)   
(write(cube 5))
(terpri)   

(write "lisp>Defining combine")
(define combine (lambda (f)
    (lambda (x y)
      (if (null? x) (quote ())
          (f (list (car x) (car y))
             ((combine f) (cdr x) (cdr y))))))) 
(terpri) 
(write "lisp>Defining zip")
(terpri) 
(define zip (combine cons))
(write "lisp>zip (list 1 2 3 4) (list 5 6 7 8)")
(terpri) 
(write(zip (list 1 2 3 4) (list 5 6 7 8)))
(terpri)
(write "lisp>Defining riff-shuffle")
(terpri)
(define riff-shuffle (lambda (deck) (begin
    (define take (lambda (n seq) (if (<= n 0) (quote ()) (cons (car seq) (take (- n 1) (cdr seq))))))
    (define drop (lambda (n seq) (if (<= n 0) seq (drop (- n 1) (cdr seq)))))
    (define mid (lambda (seq) (/ (length seq) 2)))
    ((combine append) (take (mid deck) deck) (drop (mid deck) deck)))))
(terpri)
(write "lisp>riff-shuffle (list 1 2 3 4 5 6 7 8)")
(terpri)
(write(riff-shuffle (list 1 2 3 4 5 6 7 8)) )
(terpri)
(write "lisp>riff-shuffle (riff-shuffle (riff-shuffle (list 1 2 3 4 5 6 7 8)))")
(terpri)
(write(riff-shuffle (riff-shuffle (riff-shuffle (list 1 2 3 4 5 6 7 8)))) )
(terpri)
(write "lisp>let ((a 1) (b 2)) (+ a b)")
(terpri)
(write "--------------------------TESTING >, <, or?, and?, = -------------------------------------------")
(terpri)
(define b 11)
(define c 3)
(define d 50)
(write "b = 11, c=3, d=50")
(terpri)
(write "lisp>let (and? (> b 2)(< c 10))")

(terpri)
(write (and? (> b 2)(< c 10)))
(terpri)
(write "lisp>let (or? (< b 2)(< c 10))")
(terpri)
(write (or? (< b 2)(< c 10)))
(terpri)
(write "lisp>let (and?(or? (< b 2)(< c 10))(= 50 d))")
(terpri)
(write (and?(or? (< b 2)(< c 10))(= 50 d)) )
(terpri)
(write "lisp>let (and?(and? (< b 2)(< c 10))(= 50 d))")
(terpri)
(write (and?(and? (< b 2)(< c 10))(= 50 d)) )
(terpri)
(define b_list (list 1 2 3))
(define c_list (list 5 1 7))
(define d_list (list 4 4 4))
(write "b_list =(1 2 3), c_list =(5 6 7), d_list=(4 4 4)")
(write "lisp>(and?(and? (< (car b_list) (car c_list))(< c 10))(= 50 d))")
(terpri)
(write "lisp>let (and?(and? (< (car (cdr b_list)) (car (cdr c_list)))(< c 10))(= 50 d))")
(terpri)
(write (and?(and? (< (car (cdr b_list)) (car (cdr c_list)))(< c 10))(= 50 d)))

(write "--------------------------ARITHMETIC(+, -, *, /)-------------------------------------------")
(terpri)
(write "b = 11, c=3, d=50")
(terpri)
(write "b_list =(1 2 3), c_list =(5 6 7), d_list=(4 4 4)")
(terpri)
(write "lisp> define e (+ b c)")
;e ANSWER: 14 = 11+3 
(terpri)
(write(define e (+ b c)))
(write e)
(terpri)
(write "lisp>define f (- (+ b c) (car b_list) )")
;f ANSWER: 13 =(- (+ 11 3) 1) 
(terpri)
(write(define f (- (+ b c) (car b_list) )))
(write f)
(terpri)
(write "lisp>define g (- (+ b c) (car (cdr b_list)) )")
;g ANSWER: 12 =(- (+ 11 3) 2) 
(terpri)
(write(define g (- (+ b c) (car (cdr b_list)) )))
(write g)
(terpri)
(write "lisp>define h (- (+ b c) (car (cdr b_list)) )")
(terpri)
(write(define h (/ (+ b c) (car (cdr b_list)) )))
;h ANSWER: 7 =(/ (+ 11 3) 2) 
(write h)
(terpri)
(write "define i (* (- b c) (car(cdr(cdr b_list)) ) )")
(terpri)
(write(define i (* (- b c) (car(cdr(cdr b_list)) ) )))
;i ANSWER: 24 = (* (- 11 3) 3) 
(write i)
(terpri)

(write "--------------------------COND Function-------------------------------------------")
(terpri)
(write "var1=10, var2=11, var3 12, var4 13, var5 14")
(terpri)
(write "b_list =(1 2 3), c_list =(5 6 7), d_list=(4 4 4)")
(terpri)
(define var1 10)
(define var2 11)
(define var3 12)
(define var4 13)
(define var5 14)
(terpri)
(write "lisp>Testing Cond. Set 1")
; Testing Cond. Set 1 Answer: "STRING_OUTPUT_FROM FIRST_CONDITION"
(terpri)
(cond ((= var5 14) (write "STRING_OUTPUT_FROM FIRST_CONDITION"))
         ((= var5 2) (set var5 3))
       (t (set var5  6))
)
(terpri)

(write "lisp>Testing Cond. Set 2")
; Testing Cond. Set 2 Answer: "STRING_OUTPUT_FROM FIRST_CONDITION"
(terpri)
(cond ((NUMBER? var1) (write "STRING_OUTPUT_FROM FIRST_CONDITION"))
         ((= var5 2) (set var5 3))
       (t (set var5  6))
)
(terpri)
(write "lisp>Testing Cond. Set 3")
; Testing Cond. Set 2 Answer: "(define var6 100)"
(terpri)
(cond ((NUMBER? (list 14 432 3 4)) (write "STRING_OUTPUT_FROM FIRST_CONDITION"))
         ((= var5 14) (define var6 100))
       (t (set var5  6))
)
(terpri)
(write "var6 =")
(write var6)

(terpri)


(write "--------------------------TESTING NUMBER? -------------------------------------------")
(terpri)
(write "lisp>NUMBER? 5")
(terpri)
(write(NUMBER? 5))
(terpri)
(write "lisp>NUMBER? (list 1 34 5 2)")
(terpri)
(write(NUMBER? (list 1 34 5 2)))
(terpri)
(write "In the test below, 4 and 34 are strings")
(terpri)
(write "lisp>NUMBER? (car (list 4 34 5 2))")
(terpri)
(write (NUMBER? (car (list "4" "34" 5 2))))
(terpri)
(write "lisp>NUMBER? zip")
(terpri)
(write (NUMBER? zip))
(terpri)
(write "lisp>NUMBER? ()")
(terpri)
(write (NUMBER? ()))
(terpri)

(write "--------------------------TESTING SYMBOL? -------------------------------------------")
(terpri)

(define list_sym_test (list "five" 123 "ad234" "fd" "s" 434 "1ds" 3 "ss"))
(terpri)
(write "REFERENCE list: ")
(write list_sym_test)
(terpri)
(write "lisp>SYMBOL? list_sym_test")
(terpri)
(write(SYMBOL? list_sym_test))
(terpri)
(write "lisp>SYMBOL? 5")
(terpri)
(write(SYMBOL? 5))
(terpri)
(write "lisp>SYMBOL? IF")
(terpri)
(write(SYMBOL? 'IF))
(terpri)
(write "lisp>SYMBOL? zip function")
(terpri)
(write(SYMBOL? 'zip))
(terpri)
(write "lisp>SYMBOL? (cdr(cons 1 2))")
(terpri)
(write(SYMBOL? '(cdr(cons 1 2))))
(terpri)
(write "lisp>SYMBOL? pi")
(terpri)
(write(SYMBOL? 'pi))
(terpri)

(write "--------------------------TESTING LIST? -------------------------------------------")
(terpri)
(write "b_list =(1 2 3), c_list =(5 1 7), d_list=(4 4 4)")
(terpri)
(write "lisp>LIST? b_list")
(terpri)
(write(LIST? b_list))
(terpri)
(write "lisp>LIST? (cdr(cons 1 2))")
(terpri)
(write(LIST? '(cdr(cons 1 2))))
(terpri)
(write "lisp>LIST? fact function")
(terpri)
(write(LIST? 'fact))
(terpri)
(write "lisp>LIST? string somanytest")
(terpri)
(write(LIST? "somanytest"))
(terpri)
(write "lisp>LIST? number var1")
(terpri)
(write(LIST? var1))
(terpri)

(write "--------------------------TESTING EQ? -------------------------------------------")
(terpri)
(write "b_list =(1 2 3), c_list =(5 1 7), d_list=(4 4 4), e_list(4 4 4)")
(define e_list(list 4 4 4))
(terpri)
(write "lisp>EQ? e_list d_list")
(terpri)
(write(EQUAL? e_list d_list))
(terpri)
(write "lisp>EQ? (car e_list) (car( cdr d_list))")
(terpri)
(write(EQ? (car e_list) (car( cdr d_list))))
(terpri)

(write "NOTE: second 5 is a string")
(terpri)
(write "lisp>EQ? 5 5")
(terpri)
(write(EQ? 5 "5"))
(terpri)
(write "lisp>define var7 5")
(terpri)
(write "lisp>EQ? var7 5")
(define var7 5)
(terpri)
(write(EQ? var7 5))
(terpri)
(define var7 5)
(write "lisp>EQ? (car (cdr (list 14 5 6))) 5")
(terpri)
(write(EQ? (car (cdr (list 14 5 6))) 5))
(terpri)
(write(EQUAL? (car (cdr list_string_2)) (car(cons "Tide" "test"))))
;(write list_string_2)